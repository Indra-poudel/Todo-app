{"version":3,"sources":["components/Header.js","constants/constants.js","components/ToolBar.js","components/TodoList.js","components/inputHandler.js","TodoApp.js","App.js","index.js"],"names":["Header","props","className","title","INPUT_TYPES","ButtonTypes","IconStyle","fontSize","marginRight","cursor","Toolbar","onClick","toggleToAdd","style","toggleToSearch","borderLeft","paddingLeft","marginLeft","itemsLeft","onClickAll","selectedButton","onClickIncomplete","onClickCompleted","TodoList","list","todoList","listType","filter","todo","isCompleted","map","key","id","type","checked","onChange","onChecked","task","InputHandler","types","onSearch","value","placeholder","searchPlaceholder","onKeyDown","addPlaceholder","TodoApp","setState","state","filterList","onTextChange","event","inputText","target","onPressEnter","trim","length","toLowerCase","includes","getItemLeft","onClickAdd","inputType","onClickSearch","this","Component","App","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.84bc2fa0.chunk.js","sourcesContent":["import React from \"react\";\n\nfunction Header(props) {\n  return <div className=\"TodoApp__header\">{props.title}</div>;\n}\n\nexport default Header;\n","export const INPUT_TYPES = {\n  ADD: \"Add\",\n  SEARCH: \"SEARCH\",\n};\n\nexport const ButtonTypes = {\n  ALL: \"All\",\n  INCOMPLETE: \"Incomplete\",\n  COMPLETE: \"Complete\",\n};\n","import React from \"react\";\nimport { MdSearch, MdAdd } from \"react-icons/md\";\n\nimport { ButtonTypes } from \"../constants/constants\";\n\nconst IconStyle = {\n  fontSize: \"24px\",\n  marginRight: \"5px\",\n  cursor: \"pointer\",\n};\n\nfunction Toolbar(props) {\n  return (\n    <div className=\"TodoApp__toolbar_wrapper\">\n      <div className=\"TodoApp__icon_group\">\n        <MdAdd onClick={props.toggleToAdd} style={IconStyle} />\n        <MdSearch onClick={props.toggleToSearch} style={IconStyle} />\n        <span\n          style={{\n            borderLeft: \"1px solid #CCC\",\n            paddingLeft: \"15px\",\n            marginLeft: \"10px\",\n          }}\n        >\n          {props.itemsLeft}items left\n        </span>\n      </div>\n      <div className=\"TodoApp__button_group\">\n        <div\n          onClick={props.onClickAll}\n          className={\n            props.selectedButton === ButtonTypes.ALL\n              ? \"TodoApp__button_border\"\n              : \"\"\n          }\n        >\n          All\n        </div>\n        <div\n          onClick={props.onClickIncomplete}\n          className={\n            props.selectedButton === ButtonTypes.INCOMPLETE\n              ? \"TodoApp__button_border\"\n              : \"\"\n          }\n        >\n          Incomplete\n        </div>\n        <div\n          onClick={props.onClickCompleted}\n          className={\n            props.selectedButton === ButtonTypes.COMPLETE\n              ? \"TodoApp__button_border\"\n              : \"\"\n          }\n        >\n          Completed\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default Toolbar;\n","import React from \"react\";\nimport { ButtonTypes } from \"../constants/constants\";\n\nfunction TodoList(props) {\n  let list;\n  const { todoList, listType } = props;\n\n  if (listType === ButtonTypes.COMPLETE) {\n    list = todoList.filter((todo) => todo.isCompleted === true);\n  } else if (listType === ButtonTypes.INCOMPLETE) {\n    list = todoList.filter((todo) => todo.isCompleted === false);\n  } else list = todoList.map((todo) => todo);\n\n  return (\n    <div className=\"TodoApp_list_wrapper\">\n      {list.map((todo) => (\n        <div key={todo.id} className=\"TodoApp__list\">\n          <input\n            className={\"TodoApp__checkbox\"}\n            type=\"checkbox\"\n            checked={todo.isCompleted}\n            onChange={() => props.onChecked(todo.id)}\n          />\n          <span className={todo.isCompleted ? \"TodoApp_completed_task\" : \"\"}>\n            {todo.task}\n          </span>\n        </div>\n      ))}\n    </div>\n  );\n}\n\nexport default TodoList;\n","import React from \"react\";\n\nimport { INPUT_TYPES } from \"../constants/constants\";\n\nfunction InputHandler(props) {\n  switch (props.types) {\n    case INPUT_TYPES.SEARCH:\n      return (\n        <input\n          onChange={props.onSearch}\n          className=\"TodoApp__input\"\n          value={props.value}\n          placeholder={props.searchPlaceholder}\n        />\n      );\n    case INPUT_TYPES.ADD:\n    default:\n      return (\n        <input\n          onChange={props.onChange}\n          onKeyDown={props.onKeyDown}\n          className=\"TodoApp__input\"\n          value={props.value}\n          placeholder={props.addPlaceholder}\n        />\n      );\n  }\n}\n\nexport default InputHandler;\n","import React, { Component } from \"react\";\n\nimport \"./todo-app.css\";\nimport Header from \"./components/Header\";\nimport Toolbar from \"./components/ToolBar\";\nimport TodoList from \"./components/TodoList\";\nimport InputHandler from \"./components/inputHandler\";\nimport { INPUT_TYPES, ButtonTypes } from \"./constants/constants\";\n\nclass TodoApp extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      inputType: INPUT_TYPES.ADD,\n      inputText: \"\",\n      todoList: [\n        {\n          id: 1,\n          task: \"Go to Hospital\",\n          isCompleted: false,\n        },\n        {\n          id: 2,\n          task: \"Go to School\",\n          isCompleted: true,\n        },\n      ],\n      filterList: [],\n      selectedButton: ButtonTypes.ALL,\n    };\n  }\n\n  componentDidMount() {\n    this.setState({\n      ...this.state,\n      filterList: this.state.todoList.map((todo) => todo),\n    });\n  }\n\n  onChecked = (id) => {\n    this.setState({\n      ...this.state,\n      todoList: this.state.todoList.map((todo) => {\n        if (todo.id === id)\n          return {\n            ...todo,\n            isCompleted: !todo.isCompleted,\n          };\n        return todo;\n      }),\n      filterList: this.state.filterList.map((todo) => {\n        if (todo.id === id)\n          return {\n            ...todo,\n            isCompleted: !todo.isCompleted,\n          };\n        return todo;\n      }),\n    });\n  };\n\n  onTextChange = (event) => {\n    this.setState({\n      ...this.state,\n      inputText: event.target.value,\n    });\n  };\n\n  onPressEnter = (event) => {\n    event.key === \"Enter\" &&\n      this.state.inputText.trim() !== \"\" &&\n      this.setState({\n        ...this.state,\n        todoList: [\n          ...this.state.todoList,\n          {\n            id: this.state.todoList.length + 1,\n            task: this.state.inputText,\n            isCompleted: false,\n          },\n        ],\n        inputText: \"\",\n      });\n  };\n\n  onSearch = (event) => {\n    this.setState({\n      ...this.state,\n      inputText: event.target.value,\n      filterList: this.state.todoList.filter((todo) =>\n        todo.task\n          .toLowerCase()\n          .includes(event.target.value.trim().toLowerCase())\n      ),\n    });\n  };\n\n  getItemLeft = () =>\n    this.state.todoList.filter((todo) => todo.isCompleted === false).length;\n\n  onClickAdd = () => {\n    this.setState({\n      ...this.state,\n      inputText: \"\",\n      inputType: INPUT_TYPES.ADD,\n    });\n  };\n\n  onClickSearch = () => {\n    this.setState({\n      ...this.state,\n      inputText: \"\",\n      inputType: INPUT_TYPES.SEARCH,\n      filterList: this.state.todoList.map((todo) => todo),\n    });\n  };\n\n  render() {\n    return (\n      <div className=\"TodoApp__wrapper\">\n        <div className=\"TodoApp__component\">\n          <Header title=\"THINGS TO DO\" />\n          <InputHandler\n            onChange={this.onTextChange}\n            onSearch={this.onSearch}\n            onKeyDown={this.onPressEnter}\n            value={this.state.inputText}\n            addPlaceholder=\"Add New\"\n            searchPlaceholder=\"Search\"\n            types={this.state.inputType}\n          />\n          <TodoList\n            todoList={\n              this.state.inputType === INPUT_TYPES.ADD\n                ? this.state.todoList\n                : this.state.filterList\n            }\n            onChecked={this.onChecked}\n            listType={this.state.selectedButton}\n          />\n        </div>\n        <Toolbar\n          toggleToAdd={this.onClickAdd}\n          toggleToSearch={this.onClickSearch}\n          itemsLeft={`${this.getItemLeft()} `}\n          selectedButton={this.state.selectedButton}\n          onClickAll={() => {\n            this.setState({\n              ...this.state,\n              selectedButton: ButtonTypes.ALL,\n            });\n          }}\n          onClickIncomplete={() => {\n            this.setState({\n              ...this.state,\n              selectedButton: ButtonTypes.INCOMPLETE,\n            });\n          }}\n          onClickCompleted={() => {\n            this.setState({\n              ...this.state,\n              selectedButton: ButtonTypes.COMPLETE,\n            });\n          }}\n        />\n      </div>\n    );\n  }\n}\n\nexport default TodoApp;\n","import React from \"react\";\n\nimport TodoApp from \"./TodoApp\";\n\nfunction App() {\n  return (\n    <div>\n      <TodoApp />\n    </div>\n  );\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\n\nimport \"./index.css\";\nimport App from \"./App\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n"],"sourceRoot":""}